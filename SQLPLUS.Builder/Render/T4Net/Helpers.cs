// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SQLPLUS.Builder.Render.T4Net
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using SQLPLUS.Builder.ConfigurationModels;
    using SQLPLUS.Builder.TemplateModels;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class Helpers : HelpersBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Visit https://www.SQLplus.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace ");
            
            #line 20 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(project.SQLPLUSBaseNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
            
            #line 22 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
if (build.BuildOptions.UseNullableReferenceTypes){
            
            #line default
            #line hidden
            this.Write("    #nullable enable\r\n\r\n");
            
            #line 25 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
}
            
            #line default
            #line hidden
            
            #line 26 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
if(usings.Count != 0){
            
            #line default
            #line hidden
            this.Write("    #region usings\r\n\r\n");
            
            #line 29 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  foreach(string @using in usings){
            
            #line default
            #line hidden
            this.Write("    using ");
            
            #line 30 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(@using));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 31 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  }
            
            #line default
            #line hidden
            this.Write("\r\n    #endregion usings\r\n\r\n");
            
            #line 35 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n    /// <summary>\r\n    /// SQL Plus helpers methods.\r\n    /// Note this file in" +
                    "cludes only helper methods that are required by this particular build.\r\n    /// " +
                    "</summary>\r\n    public partial class Helpers\r\n    {\r\n\r\n");
            
            #line 44 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
if(ListContains(types, "byte[]")){
            
            #line default
            #line hidden
            this.Write(@"        /// <summary>
        /// Compares two byte arrays.
        /// </summary>
        /// <param name=""value"">Byte array existing.</param>
        /// <param name=""compareValue"">Byte array compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(byte[] value, byte[] compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
            if (value.Length != compareValue.Length)
            {
                return true;
            }
            for (int idx = 0; idx != value.Length; idx++)
            {
                if (value[idx] != compareValue[idx])
                {
                    return true;
                }
            }
            return false;
        }
");
            
            #line 74 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
}
            
            #line default
            #line hidden
            
            #line 75 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
if(ListContains(types, "byte[]?")){
            
            #line default
            #line hidden
            this.Write(@"        /// <summary>
        /// Compares two byte arrays.
        /// </summary>
        /// <param name=""value"">Byte array existing.</param>
        /// <param name=""compareValue"">Byte array compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(byte[]? value, byte[]? compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
");
            
            #line 92 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  if (build.BuildOptions.UseNullableReferenceTypes){
            
            #line default
            #line hidden
            this.Write("            if (value!.Length != compareValue!.Length)\r\n            {\r\n          " +
                    "      return true;\r\n            }\r\n");
            
            #line 97 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  }else{
            
            #line default
            #line hidden
            this.Write("            if (value.Length != compareValue.Length)\r\n            {\r\n            " +
                    "    return true;\r\n            }\r\n");
            
            #line 102 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  }
            
            #line default
            #line hidden
            this.Write("            for (int idx = 0; idx != value.Length; idx++)\r\n            {\r\n       " +
                    "         if (value[idx] != compareValue[idx])\r\n                {\r\n              " +
                    "      return true;\r\n                }\r\n            }\r\n            return false;\r" +
                    "\n        }\r\n");
            
            #line 112 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
}
            
            #line default
            #line hidden
            
            #line 113 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
if(ListContains(types, "SqlGeometry")){
            
            #line default
            #line hidden
            this.Write(@"        /// <summary>
        /// Compares two SqlGeometry values.
        /// </summary>
        /// <param name=""value"">SqlGeometry existing.</param>
        /// <param name=""compareValue"">SqlGeometry to compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(SqlGeometry value, SqlGeometry compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
            return value.ToString() != compareValue.ToString();
        }
");
            
            #line 132 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
}
            
            #line default
            #line hidden
            
            #line 133 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
if(ListContains(types, "SqlGeometry?")){
            
            #line default
            #line hidden
            this.Write(@"        /// <summary>
        /// Compares two SqlGeometry values.
        /// </summary>
        /// <param name=""value"">SqlGeometry existing.</param>
        /// <param name=""compareValue"">SqlGeometry to compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(SqlGeometry? value, SqlGeometry? compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
");
            
            #line 150 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  if (build.BuildOptions.UseNullableReferenceTypes){
            
            #line default
            #line hidden
            this.Write("            return value!.ToString() != compareValue!.ToString();\r\n");
            
            #line 152 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  }else{
            
            #line default
            #line hidden
            this.Write("            return value.ToString() != compareValue.ToString();\r\n");
            
            #line 154 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  }
            
            #line default
            #line hidden
            this.Write("        }\r\n");
            
            #line 156 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
}
            
            #line default
            #line hidden
            
            #line 157 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
if(ListContains(types, "SqlGeography")){
            
            #line default
            #line hidden
            this.Write(@"        /// <summary>
        /// Compares two SqlGeography values.
        /// </summary>
        /// <param name=""value"">SqlGeography existing.</param>
        /// <param name=""compareValue"">SqlGeography to compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(SqlGeography value, SqlGeography compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
            return value.ToString() != compareValue.ToString();
        }
");
            
            #line 176 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
}
            
            #line default
            #line hidden
            
            #line 177 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
if(ListContains(types, "SqlGeography?")){
            
            #line default
            #line hidden
            this.Write(@"        /// <summary>
        /// Compares two SqlGeography values.
        /// </summary>
        /// <param name=""value"">SqlGeography existing.</param>
        /// <param name=""compareValue"">SqlGeography to compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(SqlGeography? value, SqlGeography? compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
");
            
            #line 194 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  if (build.BuildOptions.UseNullableReferenceTypes){
            
            #line default
            #line hidden
            this.Write("            return value!.ToString() != compareValue!.ToString();\r\n");
            
            #line 196 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  }else{
            
            #line default
            #line hidden
            this.Write("            return value.ToString() != compareValue.ToString();\r\n");
            
            #line 198 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  }
            
            #line default
            #line hidden
            this.Write("    \r\n        }\r\n");
            
            #line 200 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
}
            
            #line default
            #line hidden
            
            #line 201 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
if(ListContains(types, "SqlHierarchyId")){
            
            #line default
            #line hidden
            this.Write(@"        /// <summary>
        /// Compares two SqlHierarchyIds.
        /// </summary>
        /// <param name=""value"">SqlHierarchyId existing.</param>
        /// <param name=""compareValue"">SqlHierarchyId to compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(SqlHierarchyId? value, SqlHierarchyId? compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
            return value.Value.ToString() != compareValue.Value.ToString();
        }
");
            
            #line 220 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
}
            
            #line default
            #line hidden
            
            #line 221 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
if(ListContains(types, "SqlHierarchyId?")){
            
            #line default
            #line hidden
            this.Write(@"        /// <summary>
        /// Compares two SqlHierarchyIds.
        /// </summary>
        /// <param name=""value"">SqlHierarchyId existing.</param>
        /// <param name=""compareValue"">SqlHierarchyId to compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(SqlHierarchyId? value, SqlHierarchyId? compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
");
            
            #line 238 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  if (build.BuildOptions.UseNullableReferenceTypes){
            
            #line default
            #line hidden
            this.Write("            return value!.Value.ToString() != compareValue!.Value.ToString();\r\n");
            
            #line 240 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  }else{
            
            #line default
            #line hidden
            this.Write("            return value.Value.ToString() != compareValue.Value.ToString();\r\n");
            
            #line 242 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  }
            
            #line default
            #line hidden
            this.Write("    \r\n        }\r\n");
            
            #line 244 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
}
            
            #line default
            #line hidden
            
            #line 245 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
if(ListContains(types, "object")){
            
            #line default
            #line hidden
            this.Write(@"        /// <summary>
        /// Compares two objects - note in the context of SQLPLUS this will compare sql variants.
        /// </summary>
        /// <param name=""value"">Object existing.</param>
        /// <param name=""compareValue"">Object to compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool VariantIsChanged(object value, object compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
            return value.ToString() != compareValue.ToString();
        }
");
            
            #line 264 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 266 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
if(ListContains(types, "object?")){
            
            #line default
            #line hidden
            this.Write(@"        /// <summary>
        /// Compares two objects - note in the context of SQLPLUS this will compare sql variants.
        /// </summary>
        /// <param name=""value"">Object existing.</param>
        /// <param name=""compareValue"">Object to compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool VariantIsChanged(object? value, object? compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
            return value!.ToString() != compareValue!.ToString();
        }
");
            
            #line 285 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 287 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
foreach (Parameter p in parameters){
            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// Builds a datatable for that is applied to the " +
                    "parameter value.\r\n        /// </summary>\r\n        /// <param name=\"input\">List o" +
                    "f ");
            
            #line 291 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.PropertyName));
            
            #line default
            #line hidden
            this.Write("</param>\r\n        /// <returns>DataTable populated with values from input</return" +
                    "s>\r\n        public static DataTable BuildDataTable(");
            
            #line 293 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.PropertyType));
            
            #line default
            #line hidden
            this.Write(" input)\r\n        {\r\n            DataTable dt = new DataTable();\r\n");
            
            #line 296 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
foreach(Column c in p.TVColumns){
            
            #line default
            #line hidden
            this.Write("            dt.Columns.Add(\"");
            
            #line 297 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(c.PropertyName));
            
            #line default
            #line hidden
            this.Write("\", typeof(");
            
            #line 297 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(c.PropertyType.Replace("?","")));
            
            #line default
            #line hidden
            this.Write("));\r\n");
            
            #line 298 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
}
            
            #line default
            #line hidden
            this.Write("            if(input != null)\r\n\t\t\t{\r\n                foreach(");
            
            #line 301 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.UserDefinedTypeName));
            
            #line default
            #line hidden
            this.Write(" item in input)\r\n                {\r\n                    DataRow rw = dt.NewRow();" +
                    "\r\n");
            
            #line 304 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
foreach(Column c in p.TVColumns){
            
            #line default
            #line hidden
            
            #line 305 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  if(c.IsNullable){
            
            #line default
            #line hidden
            this.Write("                    if(item.");
            
            #line 306 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(c.PropertyName));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n                    {\r\n                        rw[");
            
            #line 308 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(c.Index));
            
            #line default
            #line hidden
            this.Write("] = item.");
            
            #line 308 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(c.PropertyName));
            
            #line default
            #line hidden
            this.Write(";\r\n                    }\r\n");
            
            #line 310 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  }else{
            
            #line default
            #line hidden
            this.Write("                    rw[");
            
            #line 311 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(c.Index));
            
            #line default
            #line hidden
            this.Write("] = item.");
            
            #line 311 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(c.PropertyName));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 312 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
  }
            
            #line default
            #line hidden
            
            #line 313 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
}
            
            #line default
            #line hidden
            this.Write("                    dt.Rows.Add(rw);\r\n                }\r\n\t\t\t}\r\n            return" +
                    " dt;\r\n        }\r\n");
            
            #line 319 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"
}
            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 322 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"

    public bool ListContains(List<string> items, string item)
    {
        return items.Contains(item);
    }

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\Alan\source\repos\sql-plus-version-four-builder\SQLPLUS.Builder\Render\T4Net\Helpers.tt"

private global::SQLPLUS.Builder.ConfigurationModels.ProjectInformation _projectField;

/// <summary>
/// Access the project parameter of the template.
/// </summary>
private global::SQLPLUS.Builder.ConfigurationModels.ProjectInformation project
{
    get
    {
        return this._projectField;
    }
}

private global::SQLPLUS.Builder.ConfigurationModels.BuildDefinition _buildField;

/// <summary>
/// Access the build parameter of the template.
/// </summary>
private global::SQLPLUS.Builder.ConfigurationModels.BuildDefinition build
{
    get
    {
        return this._buildField;
    }
}

private global::System.Collections.Generic.List<string> _typesField;

/// <summary>
/// Access the types parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<string> types
{
    get
    {
        return this._typesField;
    }
}

private global::System.Collections.Generic.List<string> _usingsField;

/// <summary>
/// Access the usings parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<string> usings
{
    get
    {
        return this._usingsField;
    }
}

private global::System.Collections.Generic.List<Parameter> _parametersField;

/// <summary>
/// Access the parameters parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<Parameter> parameters
{
    get
    {
        return this._parametersField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool projectValueAcquired = false;
if (this.Session.ContainsKey("project"))
{
    this._projectField = ((global::SQLPLUS.Builder.ConfigurationModels.ProjectInformation)(this.Session["project"]));
    projectValueAcquired = true;
}
if ((projectValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("project");
    if ((data != null))
    {
        this._projectField = ((global::SQLPLUS.Builder.ConfigurationModels.ProjectInformation)(data));
    }
}
bool buildValueAcquired = false;
if (this.Session.ContainsKey("build"))
{
    this._buildField = ((global::SQLPLUS.Builder.ConfigurationModels.BuildDefinition)(this.Session["build"]));
    buildValueAcquired = true;
}
if ((buildValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("build");
    if ((data != null))
    {
        this._buildField = ((global::SQLPLUS.Builder.ConfigurationModels.BuildDefinition)(data));
    }
}
bool typesValueAcquired = false;
if (this.Session.ContainsKey("types"))
{
    this._typesField = ((global::System.Collections.Generic.List<string>)(this.Session["types"]));
    typesValueAcquired = true;
}
if ((typesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("types");
    if ((data != null))
    {
        this._typesField = ((global::System.Collections.Generic.List<string>)(data));
    }
}
bool usingsValueAcquired = false;
if (this.Session.ContainsKey("usings"))
{
    this._usingsField = ((global::System.Collections.Generic.List<string>)(this.Session["usings"]));
    usingsValueAcquired = true;
}
if ((usingsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("usings");
    if ((data != null))
    {
        this._usingsField = ((global::System.Collections.Generic.List<string>)(data));
    }
}
bool parametersValueAcquired = false;
if (this.Session.ContainsKey("parameters"))
{
    this._parametersField = ((global::System.Collections.Generic.List<Parameter>)(this.Session["parameters"]));
    parametersValueAcquired = true;
}
if ((parametersValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("parameters");
    if ((data != null))
    {
        this._parametersField = ((global::System.Collections.Generic.List<Parameter>)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class HelpersBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
