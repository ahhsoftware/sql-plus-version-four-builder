<#@ template language="C#"#>
<#@ assembly name="System.Core"#>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="SQLPLUS.Builder"#>
<#@ import namespace="SQLPLUS.Builder.ConfigurationModels"#>
<#@ import namespace="SQLPLUS.Builder.TemplateModels"#>
<#@ parameter name="routine" type="SQLPLUS.Builder.TemplateModels.Routine"#>
<#@ parameter name="project" type="SQLPLUS.Builder.ConfigurationModels.ProjectInformation"#>
<#@ parameter name="build" type="SQLPLUS.Builder.ConfigurationModels.BuildDefinition"#>
// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
<#if (routine.RoutineType == "QUERY"){#>
//     Underlying Query: <#=routine.Name#>
<#}else{#>
//     Underlying Routine: <#=routine.Name#>
<#}#>
//     Last Modified On: <#=routine.LastModified.ToString()#>
//     Written By: <#=routine.Author#>
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace <#=routine.ModelNamespace#>
{
<#if (routine.UseNullableReferenceTypes){#>
    #nullable enable

<#}#>
    #region usings

<#foreach(string @using in routine.InputUsings){#>
    using <#=@using#>;
<#}#>

    #endregion usings

    /// <summary>
    /// Input object for the <#=routine.Name#> service.
    /// </summary>
    public partial class <#=routine.InputObjectName#> : <#=routine.InputImplements#>
    {
        #region Constructors

        /// <summary>
        /// Empty constructor for <#=routine.InputObjectName#>.
        /// </summary>
        public <#=routine.InputObjectName#>() { }
<#if (routine.InputParameters.Count != 0){#>

        /// <summary>
        /// Parameterized constructor for <#=routine.InputObjectName#>.
        /// </summary>
<#  foreach (Parameter p in routine.InputParameters){#>
        /// <param name="<#=p.PropertyName#>"><#=p.Comment#></param>
<#  }#>
        public <#=routine.InputObjectName#>(<#=routine.InputParametersConcat#>)
        {
<#  foreach (Parameter p in routine.InputParameters){#>
            this.<#=p.PropertyName#> = <#=p.PropertyName#>;
<#  }#>
        }
<#}#>

        #endregion Constructors

        #region Fields

<#foreach(Parameter p in routine.InputParameters){#>
        private <#=p.PropertyType#> _<#=p.PropertyName#><#=p.DefaultValue == null ? "" : " = " + p.DefaultValue#>;
        /// <summary>
        /// <#=p.Comment#>
        /// </summary>
<#  foreach(string annotation in p.Annotations){#>
        <#=annotation#>
<#  }#>
        public <#=p.PropertyType#> <#=p.PropertyName#>
        {
            get => _<#=p.PropertyName#>;
<#  if (p.IsTableValueParameter || (!build.BuildOptions.ImplementIChangeTracking && !build.BuildOptions.ImplementIRevertibleChangeTracking && !build.BuildOptions.ImplementINotifyPropertyChanged)){#>
            set => _<#=p.PropertyName#> = value;
<#  }else{#>
            set
            {
                <#=p.EqualityTestFormatter#>
                {
<#    if(build.BuildOptions.ImplementIRevertibleChangeTracking){#>
                    _ChangedProperties["<#=p.PropertyName#>"] = _<#=p.PropertyName#>;
<#    }#>
                    _<#=p.PropertyName#> = value;
                    HandlePropertyChanged(nameof(<#=p.PropertyName#>));
                }
            }
<#  }#>
        }

<#}#>
        #endregion

<#if(build.BuildOptions.ImplementIChangeTracking || build.BuildOptions.ImplementIRevertibleChangeTracking  || build.BuildOptions.ImplementINotifyPropertyChanged){#>
        #region Property Changed Management

<#}#>
<#if(build.BuildOptions.ImplementIRevertibleChangeTracking){#>
        private Dictionary<string,object> _ChangedProperties = new Dictionary<string,object>();
<#}#>
<#if(build.BuildOptions.ImplementINotifyPropertyChanged){#>
        public event PropertyChangedEventHandler PropertyChanged;
<#}#>
<#if(build.BuildOptions.ImplementIChangeTracking || build.BuildOptions.ImplementIRevertibleChangeTracking || build.BuildOptions.ImplementINotifyPropertyChanged){#>

        /// <summary>
        /// Property change handler.
        /// </summary>
        private void HandlePropertyChanged(string propertyName)
        {
<#  if(build.BuildOptions.ImplementIChangeTracking || build.BuildOptions.ImplementIRevertibleChangeTracking){#>
            IsChanged = true;
<#  }#>
<#  if(build.BuildOptions.ImplementINotifyPropertyChanged){#>
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
<#  }#>
        }
<#}#>
<#if(build.BuildOptions.ImplementIChangeTracking || build.BuildOptions.ImplementIRevertibleChangeTracking){#>
        /// <summary>
        /// Gets the object's changed status.
        /// </summary>
        public bool IsChanged { private set; get; }
<#}#>
<#if(build.BuildOptions.ImplementIChangeTracking || build.BuildOptions.ImplementIRevertibleChangeTracking){#>

        /// <summary>
        /// Resets the object's state to unchanged by accepting the modifications.
        /// </summary>
        public void AcceptChanges()
        {
<#  if(build.BuildOptions.ImplementIRevertibleChangeTracking){#>
            _ChangedProperties.Clear();
<#  }#>
            IsChanged = false;
        }
<#}#>
<#if(build.BuildOptions.ImplementIRevertibleChangeTracking){#>

        /// <summary>
        /// Resets the object's state to unchanged by rejecting the modifications.
        /// </summary>
        public void RejectChanges()
        {
            foreach (string key in _ChangedProperties.Keys)
            {
                switch (key)
                {
<#  foreach(Parameter p in routine.InputParameters){#>
                    case nameof(<#=p.PropertyName#>):
                        _<#=p.PropertyName#> = (<#=p.PropertyType#>)_ChangedProperties["<#=p.PropertyName#>"];
                        break;
<#  }#>
                }
            }

            _ChangedProperties.Clear();
            IsChanged = false;
        }
<#}#>
<#if(build.BuildOptions.ImplementIChangeTracking || build.BuildOptions.ImplementIRevertibleChangeTracking || build.BuildOptions.ImplementINotifyPropertyChanged){#>

        #endregion Property Changed Management
<#}#>
    }
}