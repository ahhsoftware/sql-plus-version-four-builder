<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SQLPLUS.Builder"#>
<#@ import namespace="SQLPLUS.Builder.ConfigurationModels"#>
<#@ import namespace="SQLPLUS.Builder.TemplateModels"#>
<#@ parameter name="routine" type="SQLPLUS.Builder.TemplateModels.Routine"#>
// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL  Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
<#if (routine.RoutineType == "QUERY"){#>
//     Underlying Query: <#=routine.Name#>
<#}else{#>
//     Underlying Routine: <#=routine.Name#>
<#}#>
//     Last Modified On: <#=routine.LastModified.ToString()#>
//     Written By: <#=routine.Author#>
//     Select Type: <#=routine.SelectType.ToString()#>
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace <#=routine.ModelNamespace#>
{
<#if (routine.UseNullableReferenceTypes){#>
    #nullable enable

<#}#>
<#if(routine.OutputUsings.Count != 0){#>

    #region usings

<#foreach(string usingDeclaration in routine.OutputUsings){#>
    using <#=usingDeclaration#>;
<#}#>

    #endregion usings

<#}#>
    /// <summary>
    /// Output object for <#=routine.Name#> service.
    /// </summary>
    public partial class <#=routine.OutputObjectName#>
    {
<#if(routine.ReturnValueEnums.Count != 0){#>

        #region Return Value Enumerations

        /// <summary>
        /// Enumerated return values based on the ReturnTags in the procedure.
        /// </summary>
        public enum Returns
        {
<#  for(int idx = 0; idx !=  routine.ReturnValueEnums.Count; idx++){#>
            /// <summary>
            /// <#=routine.ReturnValueEnums[idx].Comment#>
            /// </summary>
             <#=routine.ReturnValueEnums[idx].Name#> = <#=routine.ReturnValueEnums[idx].Value#><#=CommaIfNotLast(routine.ReturnValueEnums.Count - 1, idx)#>
<#  }#>
        }

        #endregion Return Value Enumerations
<#}#>
<#if (routine.OutputParameters.Count != 0){#>

        #region Output Parameters

<#  foreach(Parameter p in routine.OutputParameters){#>
        /// <summary>
        /// <#=p.Comment#>
        /// </summary>
        public <#=p.PropertyType#> <#=p.PropertyName#> { set; get; }
<#  }#>

	    #endregion Output Parameters
<#}#>
<#if (routine.ReturnValueParameter != null){#>

        #region Return Value

<#  if (routine.ReturnValueEnums.Count != 0){#>
        /// <summary>
        /// Enumerated return value.
        /// </summary>
        public Returns ReturnValue { set; get; }
<#}  else{#>
        /// <summary>
        /// Actual return value for the routine.
        /// </summary>
        public <#=routine.ReturnValueParameter.PropertyType#> ReturnValue { set; get; }
<#  }#>

        #endregion Return Value
<#}#>
<#if(routine.SelectType != SelectTypes.NonQuery){#>

        #region Result Data
<#}#>
<#if(routine.SelectType == SelectTypes.Json){#>

        /// <summary>
        /// Result data as Json string.
        /// </summary>
        public <#=OptProp("string")#> ResultJson { set; get; }
<#}#>
<#if(routine.SelectType == SelectTypes.Xml){#>

        /// <summary>
        /// Result data as Xml string.
        /// </summary>
        public <#=OptProp("string")#> ResultXml { set; get; }
<#}#>
<#if(routine.SelectType == SelectTypes.SingleRow){#>

        /// <summary>
        /// Single instance of <#=routine.ResultObjectName#>.
        /// </summary>
        public <#=OptProp(routine.ResultObjectName)#> ResultData { set; get; }
<#}#>
<#if(routine.SelectType == SelectTypes.MultiRow){#>

        /// <summary>
        /// List of <#=routine.ResultObjectName#>.
        /// </summary>
        public <#=OptList(routine.ResultObjectName)#> ResultData { set; get; }
<#}#>
<#if(routine.SelectType == SelectTypes.MultiSet){#>

        /// <summary>
        /// Result set wrapper for multiset queries.
        /// </summary>
        public <#=OptProp(routine.ResultObjectName)#> ResultData { set; get; }
<#}#>
<#if(routine.SelectType != SelectTypes.NonQuery){#>

        #endregion Result Data
<#}#>
    }


<#if(routine.SelectType != SelectTypes.NonQuery){#>

    #region Result Set Objects

    /// <summary>
<#  if(routine.SelectType == SelectTypes.MultiSet){#>
    /// Result set objects for <#=routine.ServiceName#> service.
<#  }else if(routine.SelectType == SelectTypes.SingleRow || routine.SelectType == SelectTypes.MultiRow){#>
    /// Result object for <#=routine.ServiceName#> service.
<#  }#>
    /// </summary>
<#}#>


<#if (routine.SelectType == SelectTypes.MultiSet){#>

    public partial class <#=routine.Name#>Result
	{
<#  foreach(ResultSet rs in routine.ResultSets){#>
        #region <#=routine.Name#>.<#=rs.Name#>
<#    if(rs.SelectType == SelectTypes.SingleRow){#>

        /// <summary>
        /// Single instance of <#=rs.Name#>.
        /// </summary>
        public  <#=OptProp(rs.Name)#> <#=rs.Name#>Result { set; get; }
<#    }#>
<#    if(rs.SelectType == SelectTypes.MultiRow){#>

        /// <summary>
        /// List of <#=rs.Name#>.
        /// </summary>
        public <#=OptList(rs.Name)#> <#=rs.Name#>Result { set; get; }
<#    }#>
<#    if(rs.SelectType == SelectTypes.Json){#>

        /// <summary>
        /// <#=rs.Name#> result as Json string.
        /// </summary>
        public <#=OptProp("string")#> <#=rs.Name#>Json { set; get; }
<#    }#>
<#    if(rs.SelectType == SelectTypes.Xml){#>

        /// <summary>
        /// <#=rs.Name#> as XML string.
        /// </summary>
        public <#=OptProp("string")#> <#=rs.Name#>Xml { set; get; }
<#    }#>
<#    if(rs.SelectType == SelectTypes.SingleRow || rs.SelectType == SelectTypes.MultiRow){#>

        /// <summary>
        /// Result set object for <#=rs.Name#>.
        /// </summary>
        public class <#=rs.Name#>
        {
            /// <summary>
            /// Parameterized constructor for Second
            /// </summary>
<#      foreach(Column c in rs.Columns){#>
            /// <param name="<#=c.PropertyName#>"><#=c.Comment#></param>
<#      }#>
            public <#=rs.Name#>(<#=rs.ConstructorParameters#>)
            {
<#      foreach(Column c in rs.Columns){#>
                this.<#=c.PropertyName#> = <#=c.PropertyName#>;
<#      }#>
            }

<#      foreach(Column c in rs.Columns){#>
            /// <summary>
            /// <#=c.Comment#>
            /// </summary>
            public <#=c.PropertyType#> <#=c.PropertyName#> { set; get; }

<#      }#>
        }
<#    }#>

        #endregion <#=routine.Name#>.<#=rs.Name#>
    
<#  }#>
    }
<#}#>


<#if (routine.SelectType == SelectTypes.SingleRow || routine.SelectType == SelectTypes.MultiRow){#>
    public partial class <#=routine.Name#>Result
	{
        /// <summary>
        /// Result set object for <#=routine.Name#>.
        /// </summary>
<#  foreach(Column c in routine.ResultSets[0].Columns){#>
        /// <param name="<#=c.PropertyName#>"><#=c.Comment#></param>
<#  }#>
        public <#=routine.Name#>Result(<#=routine.ResultSets[0].ConstructorParameters#>)
        {
<#  foreach(Column c in routine.ResultSets[0].Columns){#>
             this.<#=c.PropertyName#> = <#=c.PropertyName#>;
<#  }#>
        }

<#  if(routine.ResultSets.Count != 0){#>
<#    foreach(Column c in routine.ResultSets[0].Columns){#>

        /// <summary>
        /// <#=c.Comment#>
        /// </summary>
        public <#=c.PropertyType#> <#=c.PropertyName#> { set; get; }
<#    }#>
<#  }#>
    }
<#}#>


<#if (routine.SelectType != SelectTypes.NonQuery){#>
    #endregion Result Set Objects
<#}#>

}
<#+ 
    private string Format(string sourceString, string value1, string value2)
    {
        return string.Format(sourceString, value1, value2);
    }
    private string CommaIfNotLast(int count, int idx)
    {
        return idx == count ? "" : ",";
    }
    private string OptProp(string propertyName)
    {
        if(routine.UseNullableReferenceTypes)
        {
            return propertyName + "?";
        }
        return propertyName;
    }

    private string OptList(string propertyName)
    {
        if(routine.UseNullableReferenceTypes)
        {
            return "List<" + propertyName + ">?";
        }
        return "List<" + propertyName + ">";
    }
    
#>






