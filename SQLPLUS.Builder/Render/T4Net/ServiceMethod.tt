<#@ template language="C#"#>
<#@ assembly name="System.Core"#>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="SQLPLUS.Builder"#>
<#@ import namespace="SQLPLUS.Builder.ConfigurationModels"#>
<#@ import namespace="SQLPLUS.Builder.TemplateModels"#>
<#@ parameter name="routine" type="SQLPLUS.Builder.TemplateModels.Routine"#>
<#@ parameter name="project" type="SQLPLUS.Builder.ConfigurationModels.ProjectInformation"#>
<#@ parameter name="build" type="SQLPLUS.Builder.ConfigurationModels.BuildDefinition"#>
// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
<#if (routine.RoutineType == "QUERY"){#>
//     Underlying Query: <#=routine.Name#>
<#}else{#>
//     Underlying Routine: <#=routine.Name#>
<#}#>
//     Last Modified On: <#=routine.LastModified.ToString()#>
//     Written By: <#=routine.Author#>
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace <#=routine.ServiceNamespace#>
{
<#if (routine.UseNullableReferenceTypes){#>
    #nullable enable

<#}#>
    #region Using Statments

<#foreach(string @using in routine.ServiceUsings){#>
    using <#=@using#>;
<#}#>

    #endregion Using Statements

    /// <summary>
    /// This file contains the source code for the <#=routine.Name#> routine.
    /// </summary>
    public partial class Service
    {
        #region Build SqlCommand

        private SqlCommand <#=routine.BuildCommandName#>(<#=routine.BuildCommandParameters#>)
        {
            SqlCommand result = new SqlCommand()
            {
<#if(routine.CommandTimeout.HasValue){#>
                CommandTimeout = <#=routine.CommandTimeout.Value#>,
<#}#>
                CommandType = <#=routine.AdoCommandType#>,
                CommandText = <#=routine.AdoCommandText#>,
                Connection = cnn
            };
<#foreach(Parameter p in routine.Parameters){#>

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "<#=p.AdoParameterName#>",
                Direction = <#=p.AdoDirection#>,
                SqlDbType = <#=p.AdoSqlDbType#>,
<#  if(p.AdoSize != null){#>
                Size = <#=p.AdoSize ?? p.AdoSize#>,
<#  }#>
<#  if(p.AdoScale != null){#>
                Scale = <#=p.AdoScale#>,
<#  }#>
<#  if(p.AdoPrecision != null){#>
                Precision = <#=p.AdoPrecision#>,
<#  }#>
<#  if(p.UserDefinedTypeSchema != null){#>
                TypeName = "<#=p.UserDefinedTypeSchema#>.<#=p.UserDefinedTypeName#>",
<#  }#>
<#  if(p.AdoUdtTypeName != null){#>
                UdtTypeName = "<#=p.AdoUdtTypeName#>",
<#  }#>
<#  if(p.IsRequired){#>
<#    if(p.UserDefinedTypeSchema != null){#>
			    Value = Helpers.BuildDataTable(input.<#=p.PropertyName#>)
<#    }else{#>
                Value = input.<#=p.PropertyName#>
<#    }#>
<#  }else{#>
                Value = DBNull.Value
<#  }#>
            });
<#}#>

<#foreach(Parameter p in routine.InputParameters){#>
<#  if (!p.IsRequired){#>
            if (input.<#=p.PropertyName#> != null)
            {
<#    if(p.UserDefinedTypeSchema != null){#>
			    result.Parameters["<#=p.Name#>"].Value = Helpers.BuildDataTable(input.<#=p.PropertyName#>);
<#    }else{#>
                result.Parameters["<#=p.Name#>"].Value = input.<#=p.PropertyName#>;
<#    }#>
            }
<#  }#>
<#}#>
            return result;
        }

        #endregion Build SqlCommand
<#if (routine.NonInputParameters.Count != 0){#>

        #region Read Output Parameters And Return Value

        private void <#=routine.SetParametersName#>(SqlCommand cmd, <#=routine.Name#>Output output)
        {
<#foreach(Parameter p in routine.NonInputParameters){#>
            if(cmd.Parameters[<#=p.Index#>].Value != DBNull.Value)
            {
                output.<#=p.PropertyName#> = <#=OutParameterCast(p)#>cmd.Parameters[<#=p.Index#>].Value;
            }
<#}#>
        }

        #endregion Read Output Parameters And Return Value
<#}#>
<#if(routine.SelectType != SelectTypes.NonQuery){#>

        #region Reader To Result Objects
<#}#>
<#if(routine.SelectType == SelectTypes.SingleRow || routine.SelectType == SelectTypes.MultiRow){#>
        
        private <#=routine.Name#>Result <#=routine.Name#>_ResultData(SqlDataReader rdr)
        {
            return new <#=routine.Name#>Result(
<#  foreach(Column c in routine.ResultSets[0].Columns){#>
<#      if(c.IsNullable){#>
            rdr.IsDBNull(<#=c.Index#>) ? null : <#=Format(c.AdoGetterFormatter,c.Index)#><#=CommaIfNotLast(routine.ResultSets[0].Columns, c)#>
<#      }else{#>
            <#=Format(c.AdoGetterFormatter,c.Index)#><#=CommaIfNotLast(routine.ResultSets[0].Columns, c)#>
<#      }#>
<#  }#>
            );
        }
<#}#>
<#if(routine.SelectType == SelectTypes.MultiSet){#>
<#  foreach(ResultSet rs in routine.ResultSets){#>
<#      if(rs.SelectType == SelectTypes.SingleRow || rs.SelectType == SelectTypes.MultiRow){#>
      
        private <#=routine.Name#>Result.<#=rs.Name#> <#=routine.Name#>_<#=rs.Name#>(SqlDataReader rdr)
        {
            return new <#=routine.Name#>Result.<#=rs.Name#>(
<#  foreach (Column c in rs.Columns){#>
<#      if(c.IsNullable){#>
                rdr.IsDBNull(<#=c.Index#>) ? null : <#=Format(c.AdoGetterFormatter,c.Index)#><#=CommaIfNotLast(rs.Columns, c)#>
<#      }else{#>
                <#=Format(c.AdoGetterFormatter,c.Index)#><#=CommaIfNotLast(rs.Columns, c)#>
<#      }#>
<#  }#>
            );
        }
<#      }#>
<#  }#>
<#}#>
<#if(routine.SelectType != SelectTypes.NonQuery){#>    
        #endregion Reader To Result Objects
<#}#>
<#if(routine.SelectType == SelectTypes.MultiSet){#>

        #region MultiSetResolve

        private string <#=routine.ServiceName#>_Resolve(SqlDataReader rdr)
        {
            string[] array = new string[rdr.FieldCount];
            for (int idx = 0; idx != array.Length; idx++)
            {
                array[idx] = rdr.GetName(idx);
            }
            string concatColumns = string.Join("_", array);

            switch(concatColumns)
            {
<#      foreach(ResultSet rs in routine.ResultSets){#>
                case ("<#=rs.ConcatColumns#>"):
                    return "<#=rs.Name#>";
<#      }#>
            }

            throw new Exception("The multi result query could not resolve. Each query must contain at least one unique value. Edit the routine and rebuild the project needs a fresh SQL PLUS build.");
        }

        #endregion MultSet Resolver
<#}#>

        #region Execute Command

        private void <#=routine.Name#>_Execute(SqlCommand cmd, <#=routine.Name#>Output output)
        {
<#if(routine.SelectType == SelectTypes.NonQuery){#>
            cmd.ExecuteNonQuery();
<#}#>
<#if(routine.SelectType == SelectTypes.Json || routine.SelectType == SelectTypes.Xml){#>
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                StringBuilder bldr = new StringBuilder();
                while (rdr.Read())
                {
                    bldr.Append(rdr.GetString(0));
                }
                rdr.Close();
                output.Result<#=routine.SelectType.ToString()#> = bldr.ToString();
            }
<#}#>
<#if(routine.SelectType == SelectTypes.SingleRow || routine.SelectType == SelectTypes.MultiRow){#>
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
<#  if(routine.SelectType == SelectTypes.SingleRow){#>
                if(rdr.Read())
                {
                    output.ResultData = <#=routine.Name#>_ResultData(rdr);
                }
<#  }else{#>
                output.ResultData = new List<<#=routine.Name#>Result>();
                while(rdr.Read())
                {
                    output.ResultData.Add(<#=routine.Name#>_ResultData(rdr));
                }
<#  }#>
                rdr.Close();
            }
<#}#>
<#      if(routine.SelectType == SelectTypes.MultiSet){#>
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                do
                {
                    if (rdr.HasRows)
                    {
                        switch (<#=routine.Name#>_Resolve(rdr))
                        {
<#          foreach(ResultSet rs in routine.ResultSets){#>
                            case "<#=rs.Name#>":
<#              if(rs.SelectType == SelectTypes.Json || rs.SelectType == SelectTypes.Xml){#>

                                StringBuilder <#=rs.Name#>StringBuilder = new StringBuilder();
                                while (rdr.Read())
                                {
                                    <#=rs.Name#>StringBuilder.Append(rdr.GetString(0));
                                }
                                <#=OptNotNull("output.ResultData")#>.<#=rs.Name#><#=rs.SelectType.ToString()#> = <#=rs.Name#>StringBuilder.ToString();
<#              }#>
<#              if(rs.SelectType == SelectTypes.SingleRow){#>

                                if(rdr.Read())
                                {
                                    <#=OptNotNull("output.ResultData")#>.<#=rs.Name#>Result = <#=routine.Name#>_<#=rs.Name#>(rdr);
                                }
<#              }#>
<#              if(rs.SelectType == SelectTypes.MultiRow){#>

                                <#=OptNotNull("output.ResultData")#>.<#=rs.Name#>Result = new List<<#=routine.Name#>Result.<#=rs.Name#>>();
                                while(rdr.Read())
                                {
                                    <#=OptNotNull("output.ResultData")#>.<#=rs.Name#>Result.Add(<#=routine.Name#>_<#=rs.Name#>(rdr));
                                }
<#              }#>
                                break;
<#          }#>
                        }
                    }
                } while (rdr.NextResult());

                rdr.Close();
            }
<#      }#>
<#      if(routine.NonInputParameters.Count != 0){#>

            <#=routine.SetParametersName#>(cmd, output);
<#      }#>
        }

        #endregion Execute Command


        #region Execute Command Async

        private async Task <#=routine.Name#>_ExecuteAsync(SqlCommand cmd, <#=routine.Name#>Output output)
        {
<#if(routine.SelectType == SelectTypes.NonQuery){#>
            await cmd.ExecuteNonQueryAsync();
<#}#>
<#if(routine.SelectType == SelectTypes.Json || routine.SelectType == SelectTypes.Xml){#>
            using (SqlDataReader rdr = await cmd.ExecuteReaderAsync())
            {
                StringBuilder bldr = new StringBuilder();
                while (rdr.Read())
                {
                    bldr.Append(rdr.GetString(0));
                }
                await rdr.CloseAsync();
                output.Result<#=routine.SelectType.ToString()#> = bldr.ToString();
            }
<#}#>
<#if(routine.SelectType == SelectTypes.SingleRow || routine.SelectType == SelectTypes.MultiRow){#>
            using (SqlDataReader rdr = await cmd.ExecuteReaderAsync())
            {
<#  if(routine.SelectType == SelectTypes.SingleRow){#>
                if(rdr.Read())
                {
                    output.ResultData = <#=routine.Name#>_ResultData(rdr);
                }
<#  }else{#>
                output.ResultData = new List<<#=routine.Name#>Result>();
                while(rdr.Read())
                {
                    output.ResultData.Add(<#=routine.Name#>_ResultData(rdr));
                }
<#  }#>
                await rdr.CloseAsync();
            }
<#}#>
<#      if(routine.SelectType == SelectTypes.MultiSet){#>
            using (SqlDataReader rdr = await cmd.ExecuteReaderAsync())
            {
                do
                {
                    if (rdr.HasRows)
                    {
                        switch (<#=routine.Name#>_Resolve(rdr))
                        {
<#          foreach(ResultSet rs in routine.ResultSets){#>
                            case "<#=rs.Name#>":
<#              if(rs.SelectType == SelectTypes.Json || rs.SelectType == SelectTypes.Xml){#>

                                StringBuilder <#=rs.Name#>StringBuilder = new StringBuilder();
                                while (rdr.Read())
                                {
                                    <#=rs.Name#>StringBuilder.Append(rdr.GetString(0));
                                }
                                <#=OptNotNull("output.ResultData")#>.<#=rs.Name#><#=rs.SelectType.ToString()#> = <#=rs.Name#>StringBuilder.ToString();
<#              }#>
<#              if(rs.SelectType == SelectTypes.SingleRow){#>

                                if(rdr.Read())
                                {
                                    <#=OptNotNull("output.ResultData")#>.<#=rs.Name#>Result = <#=routine.Name#>_<#=rs.Name#>(rdr);
                                }
<#              }#>
<#              if(rs.SelectType == SelectTypes.MultiRow){#>

                                <#=OptNotNull("output.ResultData")#>.<#=rs.Name#>Result = new List<<#=routine.Name#>Result.<#=rs.Name#>>();
                                while(rdr.Read())
                                {
                                    <#=OptNotNull("output.ResultData")#>.<#=rs.Name#>Result.Add(<#=routine.Name#>_<#=rs.Name#>(rdr));
                                }
<#              }#>
                                break;
<#          }#>
                        }
                    }
                } while (rdr.NextResult());

                await rdr.CloseAsync();
            }
<#      }#>
<#      if(routine.NonInputParameters.Count != 0){#>

            <#=routine.SetParametersName#>(cmd, output);
<#      }#>
        }

        #endregion Execute Command Async

        #region Public Service

        /// <summary>
        /// <#=routine.Comment#><br/>
        /// DB Routine: <#=routine.Schema#>.<#=routine.Name#><br/>
        /// Author: <#=routine.Author#><br/>
        /// </summary>
<#      if(routine.InputParameters.Count != 0){#>
        /// <param name="input"><#=routine.InputObjectName#> instance.</param>
<#}#>
        /// <returns>Instance of <#=routine.OutputObjectName#></returns>
        public <#=routine.OutputObjectName#> <#=routine.ServiceName#>(<#=routine.ServiceParameters#>)
        {
<#      if(routine.InputParameters.Count != 0){#>
            ValidateInput(input, nameof(<#=routine.ServiceName#>));
<#      }#>
<#      if(routine.SelectType == SelectTypes.MultiSet){#>
            <#=routine.OutputObjectName#> output = new <#=routine.OutputObjectName#> { ResultData = new <#=routine.ResultObjectName#>() };
<#      }else{#>
            <#=routine.OutputObjectName#> output = new <#=routine.OutputObjectName#>();
<#      }#>
			if(sqlConnection != null)
            {
<#      if (routine.InputParameters.Count != 0){#>
                using (SqlCommand cmd = <#=routine.BuildCommandName#>(sqlConnection, input))
<#      }else{#>
                using (SqlCommand cmd = <#=routine.BuildCommandName#>(sqlConnection))
<#      }#>
                {
                    cmd.Transaction = sqlTransaction;
                    <#=routine.ServiceName#>_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
<#      if (routine.InputParameters.Count != 0){#>
                    using (SqlCommand cmd = <#=routine.BuildCommandName#>(cnn, input))
<#      }else{#>
                    using (SqlCommand cmd = <#=routine.BuildCommandName#>(cnn))
<#      }#>
                    {
                        cnn.Open();
						<#=routine.ServiceName#>_Execute(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion Public Service


		#region Public Service Async

        /// <summary>
        /// <#=routine.Comment#><br/>
        /// DB Routine: <#=routine.Schema#>.<#=routine.Name#><br/>
        /// Author: <#=routine.Author#><br/>
        /// </summary>
<#      if(routine.InputParameters.Count != 0){#>
        /// <param name="input"><#=routine.InputObjectName#> instance.</param>
<#}#>
        /// <returns>Instance of <#=routine.OutputObjectName#></returns>
        public async Task<<#=routine.OutputObjectName#>> <#=routine.ServiceName#>Async(<#=routine.ServiceParameters#>)
        {
<#      if(routine.InputParameters.Count != 0){#>
            ValidateInput(input, nameof(<#=routine.ServiceName#>));
<#      }#>
<#      if(routine.SelectType == SelectTypes.MultiSet){#>
            <#=routine.OutputObjectName#> output = new <#=routine.OutputObjectName#> { ResultData = new <#=routine.ResultObjectName#>() };
<#      }else{#>
            <#=routine.OutputObjectName#> output = new <#=routine.OutputObjectName#>();
<#      }#>
			if(sqlConnection != null)
            {
<#      if (routine.InputParameters.Count != 0){#>
                using (SqlCommand cmd = <#=routine.BuildCommandName#>(sqlConnection, input))
<#      }else{#>
                using (SqlCommand cmd = <#=routine.BuildCommandName#>(sqlConnection))
<#      }#>
                {
                    cmd.Transaction = sqlTransaction;
                    <#=routine.ServiceName#>_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
<#      if (routine.InputParameters.Count != 0){#>
                    using (SqlCommand cmd = <#=routine.BuildCommandName#>(cnn, input))
<#      }else{#>
                    using (SqlCommand cmd = <#=routine.BuildCommandName#>(cnn))
<#      }#>
                    {
                        await cnn.OpenAsync();
						await <#=routine.ServiceName#>_ExecuteAsync(cmd, output);
                        await cnn.CloseAsync();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion Public Service Async

    }
}

<#+
    private string OutParameterCast(Parameter p)
    {
        if (p.IsReturnValue || p.MSSQLParameterMode == "OUTPUTASRETURN")
        {
            if(routine.ReturnValueEnums.Count != 0)
            {
                return $"({routine.Name}Output.Returns)";
            }
        }

        if(p.EnumerationName != null)
        {
            return $"({p.EnumerationName})";
        }
        return $"({p.PropertyType})";
    }
    private string Format(string sourceString, int value)
    {
        return sourceString.Replace("{0}", value.ToString());
    }
    private string Format(string sourceString, string value)
    {
        return sourceString.Replace("{0}", value.ToString());
    }
    private string CommaIfNotLast(List<Column> columns, Column column)
    {
        if(columns.IndexOf(column) == columns.Count - 1)
        {
            return "";
        }
        return ",";
    }
    private string OptNotNull(string value)
    {
        if(routine.UseNullableReferenceTypes)
        {
            return value + "!";
        }
        return value;
    }
#>