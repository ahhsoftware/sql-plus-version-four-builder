<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SQLPLUS.Builder.ConfigurationModels" #>
<#@ import namespace="SQLPLUS.Builder.TemplateModels" #>
<#@ parameter name="project" type="SQLPLUS.Builder.ConfigurationModels.ProjectInformation" #>
<#@ parameter name="types" type="System.Collections.Generic.List<string>"#>
<#@ parameter name="usings" type="System.Collections.Generic.List<string>"#>
// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Visit https://www.SQLplus.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace <#=project.SqlPlusBaseNamespace#>
{
<#if(usings.Count != 0){#>
    #region usings

<#  foreach(string @using in usings){#>
    using <#=@using#>;
<#  }#>

    #endregion usings

<#}#>

    /// <summary>
    /// SQL Plus helpers methods.
    /// Note this file includes only helper methods that are required by this particular build.
    /// </summary>
    public partial class Helpers
    {

<#if(ListContains(types, "byte[]")){#>
        /// <summary>
        /// Compares two byte arrays.
        /// </summary>
        /// <param name="value">Byte array existing.</param>
        /// <param name="compareValue">Byte array compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(byte[] value, byte[] compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
            if (value.Length != compareValue.Length)
            {
                return true;
            }
            for (int idx = 0; idx != value.Length; idx++)
            {
                if (value[idx] != compareValue[idx])
                {
                    return true;
                }
            }
            return false;
        }
<#}#>
<#if(ListContains(types, "byte[]?")){#>
        /// <summary>
        /// Compares two byte arrays.
        /// </summary>
        /// <param name="value">Byte array existing.</param>
        /// <param name="compareValue">Byte array compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(byte[]? value, byte[]? compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
            if (value.Length != compareValue.Length)
            {
                return true;
            }
            for (int idx = 0; idx != value.Length; idx++)
            {
                if (value[idx] != compareValue[idx])
                {
                    return true;
                }
            }
            return false;
        }
<#}#>
<#if(ListContains(types, "SqlGeometry")){#>
        /// <summary>
        /// Compares two SqlGeometry values.
        /// </summary>
        /// <param name="value">SqlGeometry existing.</param>
        /// <param name="compareValue">SqlGeometry to compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(SqlGeometry value, SqlGeometry compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
            return value.ToString() != compareValue.ToString();
        }
<#}#>
<#if(ListContains(types, "SqlGeometry?")){#>
        /// <summary>
        /// Compares two SqlGeometry values.
        /// </summary>
        /// <param name="value">SqlGeometry existing.</param>
        /// <param name="compareValue">SqlGeometry to compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(SqlGeometry? value, SqlGeometry? compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
            return value.ToString() != compareValue.ToString();
        }
<#}#>
<#if(ListContains(types, "SqlGeography")){#>
        /// <summary>
        /// Compares two SqlGeography values.
        /// </summary>
        /// <param name="value">SqlGeography existing.</param>
        /// <param name="compareValue">SqlGeography to compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(SqlGeography value, SqlGeography compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
            return value.ToString() != compareValue.ToString();
        }
<#}#>
<#if(ListContains(types, "SqlGeography?")){#>
        /// <summary>
        /// Compares two SqlGeography values.
        /// </summary>
        /// <param name="value">SqlGeography existing.</param>
        /// <param name="compareValue">SqlGeography to compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(SqlGeography? value, SqlGeography? compareValue)
        {
            if (!value.HasValue && !compareValue.HasValue)
            {
                return false;
            }
            if ((value.HasValue && !compareValue.HasValue) || (!value.HasValue && compareValue.HasValue))
            {
                return true;
            }
            return value.ToString() != compareValue.ToString();
        }
<#}#>
<#if(ListContains(types, "SqlHierarchyId")){#>
        /// <summary>
        /// Compares two SqlHierarchyIds.
        /// </summary>
        /// <param name="value">SqlHierarchyId existing.</param>
        /// <param name="compareValue">SqlHierarchyId to compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(SqlHierarchyId? value, SqlHierarchyId? compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
            return value.Value.ToString() != compareValue.Value.ToString();
        }
<#}#>
<#if(ListContains(types, "SqlHierarchyId?")){#>
        /// <summary>
        /// Compares two SqlHierarchyIds.
        /// </summary>
        /// <param name="value">SqlHierarchyId existing.</param>
        /// <param name="compareValue">SqlHierarchyId to compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(SqlHierarchyId? value, SqlHierarchyId? compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
            return value.Value.ToString() != compareValue.Value.ToString();
        }
<#}#>
<#if(ListContains(types, "object")){#>
        /// <summary>
        /// Compares two objects - note in the context of SQLPLUS this will compare sql variants.
        /// </summary>
        /// <param name="value">Object existing.</param>
        /// <param name="compareValue">Object to compare to.</param>
        /// <returns>True or False depending on the outcome of the comparison.</returns>
        public static bool ValueIsChanged(object value, object compareValue)
        {
            if (value == null && compareValue == null)
            {
                return false;
            }
            if ((value == null && compareValue != null) || (value != null && compareValue == null))
            {
                return true;
            }
            return value.ToString() != compareValue.ToString();
        }
<#}#>
    }
}
<#+
    public bool ListContains(List<string> items, string item)
    {
        return items.Contains(item);
    }
#>