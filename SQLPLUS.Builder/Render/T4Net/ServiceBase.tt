<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SQLPLUS.Builder"#>
<#@ import namespace="SQLPLUS.Builder.ConfigurationModels"#>
<#@ import namespace="SQLPLUS.Builder.TemplateModels"#>
<#@ parameter name="project" type="SQLPLUS.Builder.ConfigurationModels.ProjectInformation"#>
<#@ parameter name="build" type="SQLPLUS.Builder.ConfigurationModels.BuildDefinition"#>
<#@ parameter name="nameSpace" type="System.String" #>
// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace <#=nameSpace#>
{
    #region usings

<#foreach(string s in Usings()){#>
    using <#=s#>;
<#}#>

    #endregion usings

    #region Service Partial

    /// <summary>
    /// Non-service partial class contains constructors and utility functions available in all service specific partials.
    /// </summary>
    public partial class Service
    {

        #region Private Readonly Variables

        private readonly SqlConnection sqlConnection;
        private readonly SqlTransaction sqlTransaction;
        private readonly string connectionString;
        private readonly IRetryOptions retryOptions;

        #endregion Private Readonly Variables

        #region Contructors

        /// <summary>
        /// Creates a new service object that will connect to the database using the connection string provided.
        /// Note that additional contructors with options for transient error management and transactions are available in pro and enterprise versions.
        /// Upgrade here: https://www.SQLPlus.net
        /// </summary>
        /// <param name="connectionString">Connection String to the relevant database with appropriate credentials and settings.</param>
        public Service(string connectionString)
        {
            if (string.IsNullOrEmpty(connectionString)) throw new ArgumentNullException(nameof(connectionString));

            this.connectionString = connectionString;
            this.retryOptions = new DefaultRetryOptions();
        }

        /// <summary>
        /// Creates a new service object that will connect to the database using the connection string provided.
        /// All service calls will execute using the retry options provided.
        /// Visit https://www.SQLPlus.net/ for more information on transient error management.
        /// </summary>
        /// <param name="connectionString">Connection String to the relevant database with appropriate credentials and settings.</param>
        /// <param name="retryOptions">Object implementing the IRetryOptions interface.</param>
        public Service(string connectionString, IRetryOptions retryOptions)
        {
            if (string.IsNullOrEmpty(connectionString))
            {
                throw new ArgumentException($"'{nameof(connectionString)}' cannot be null or empty.", nameof(connectionString));
            }

            this.connectionString = connectionString;
            this.retryOptions = retryOptions ?? throw new ArgumentNullException(nameof(retryOptions));
        }

        /// <summary>
        /// Creates a new service object that allows developer control of the connection and transactions.
        /// Visit https://www.SQLPlus.net/ for more information on transaction management.
        /// User is responsible for connection and transaction management.
        /// </summary>
        /// <param name="sqlConnection">Ready to execute SqlConnection.</param>
        /// <param name="sqlTransaction">Ready to execute SqlTransaction.</param>
        public Service(SqlConnection sqlConnection, SqlTransaction sqlTransaction)
        {
            if (sqlConnection == null)
            {
                throw new ArgumentNullException(nameof(sqlConnection));
            }
            if (sqlTransaction == null)
            {
                throw new ArgumentNullException(nameof(sqlTransaction));
            }
            this.sqlConnection = sqlConnection;
            this.sqlTransaction = sqlTransaction;
        }

        #endregion Contructors

        #region Default Retry Options

        /// <summary>
        /// Default implementation of Retry Options. Used when no retry options are passed.
        /// </summary>
        private class DefaultRetryOptions : RetryOptions
        {
            public DefaultRetryOptions() :
            base(
                new System.Collections.Generic.List<int>(),
                new System.Collections.Generic.List<int>(),
                null
                )
            { }
        }

        #endregion Default Retry Options

        #region Private Methods

        /// <summary>
        /// This method is called on every service call to validate the input prior to sumbitting to the database.
        /// </summary>
        /// <param name="input">Input object derive from ValidInput.</param>
        /// <param name="method">The method name where the validation is taking place.</param>
        private void ValidateInput(ValidInput input, string method)
        {
            if(input is null)
            {
                throw new ArgumentNullException($"The input object passed to service method {method} cannot be null.", "input");
            }
            if (!input.IsValid())
            {
                throw new ArgumentException($"The input object passed to service method {method} fails validation. Use the {method}Input.IsValid() method prior to calling the service.", "input");
            }
        }

        /// <summary>
        /// This method checks a SQL exception to see it is to be treated as a transient error.
        /// If it is infact a transient error the retry options will determine if the exception is thrown or handled.
        /// </summary>
        /// <param name="idx">Current index in the currently executing service.</param>
        /// <param name="exception">The SqlException that was the source of the call.</param>
        private void AllowRetryOrThrowError(int idx, SqlException exception)
        {
            bool throwException = true;

            if (retryOptions.TransientErrorNumbers.Contains(exception.Number))
            {
                throwException = (idx == retryOptions.RetryIntervals.Count);

                if (retryOptions.Logger != null)
                {
                    retryOptions.Logger.Log(exception);
                }
            }
            if (throwException)
            {
                throw exception;
            }
        }

        #endregion Private Methods

    }

    #endregion Service Partial
}

<#+
    private List<string> Usings()
    {
        List<string> result = new List<string>();
        result.Add("System");
        result.Add("System.Collections.Generic");
        result.Add(project.SQLPLUSBaseNamespace);
        result.Add(build.SQLClientNamespace);
        result.Add(build.SQLExceptionNamespace);
        return result;
    }
#>