<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SQLPLUS.Builder.ConfigurationModels" #>
<#@ parameter name="build" type="SQLPLUS.Builder.ConfigurationModels.BuildDefinition" #>
<#@ parameter name="project" type="SQLPLUS.Builder.ConfigurationModels.ProjectInformation" #>
// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace <#=project.SQLPLUSBaseNamespace#>
{
    #region usings

<#foreach (string s in Usings(build)){#>
    using <#=s#>;
<#}#>

    #endregion

    #region Transient Logger

    /// <summary>
    /// Implementation of this interface is utilized for any transient error logging.
    /// </summary>
    public interface ITransientLogger
    {
        /// <summary>
        /// Logs the exception.
        /// </summary>
        /// <param name="sqlException">The exception to log.</param>
        void Log(SqlException sqlException);
    }

    #endregion Transient Logger

    #region Retry Options

    /// <summary>
    /// Implementation of this interface is utilized for handling any transient errors.
    /// </summary>
    public interface IRetryOptions
    {
        /// <summary>
        /// List of error numbers to treat as transient.
        /// </summary>
        List<int> TransientErrorNumbers { get; }

        /// <summary>
        /// List of Retry Intervals in milliseconds.
        /// </summary>
        List<int> RetryIntervals { get; }

        /// <summary>
        /// Implentation of ITransientLogger.
        /// </summary>
        ITransientLogger Logger { get; }
    }

    /// <summary>
    /// Base class for retry options. Non transaction instantiation of the service component takes an optional parameter for retry options.
    /// When no options are explicitly passed the NoRetryOptions are utilized.
    /// </summary>
    public abstract class RetryOptions : IRetryOptions
    {
        /// <summary>
        /// Constructor for the RetryOptions.
        /// </summary>
        /// <param name="transientErrorNumbers">List of error numbers to treat as transient.</param>
        /// <param name="retryIntervals">List of Retry Intervals in milliseconds.</param>
        /// <param name="logger">Implentation of ITransientLogger. Leave null to exclude logging is bypassed.</param>
        public RetryOptions (List<int> transientErrorNumbers, List<int> retryIntervals, ITransientLogger logger)
        {
            if (transientErrorNumbers == null)
            {
                throw new ArgumentNullException("transientErrorNumbers", "Value cannot be null");
            }

            if (retryIntervals == null)
            {
                throw new ArgumentNullException("retryIntervals", "Value cannot be null");
            }

            TransientErrorNumbers = transientErrorNumbers;
            RetryIntervals = retryIntervals;
            Logger = logger;
        }

        /// <summary>
        /// List of error numbers to treat as transient.
        /// </summary>
        public List<int> TransientErrorNumbers { private set; get; }

        /// <summary>
        /// List of Retry Intervals in milliseconds.
        /// </summary>
        public List<int> RetryIntervals { private set; get; }

        /// <summary>
        /// Implentation of ITransientLogger.
        /// </summary>
        public ITransientLogger Logger { private set; get; }

    }

    #endregion Retry Options
}
<#+
    private List<string> Usings(BuildDefinition build)
    {
        List<string> result = new List<string>();
        result.Add("System");
        result.Add("System.Collections.Generic");
        result.Add(build.SQLClient);
        if(build.SQLClient != build.SQLExceptionNamespace)
        {
            result.Add(build.SQLExceptionNamespace);
        }
        return result;
    }
#>