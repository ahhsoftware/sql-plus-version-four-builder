using System.Collections.Generic;

namespace SQLPLUS.Builder.Mappings
{
    public class KeywordMappings
    {
        private static Dictionary<string,string> reservedWords = new Dictionary<string, string>
        {
            {"abstract","Abstract" },
            {"add","Add"},
            {"as","As"},
            {"ascending","Ascending"},
            {"async","Async"},
            {"await","Await"},
            {"base","Base"},
            {"bool","Bool"},
            {"break","Break"},
            {"by","By"},
            {"byte","Byte"},
            {"case","Case"},
            {"catch","Catch"},
            {"char","Char"},
            {"checked","Checked"},
            {"class","Class"},
            {"const","Const"},
            {"continue","Continue"},
            {"decimal","Decimal"},
            {"default","Default"},
            {"delegate","Delegate"},
            {"descending","Descending"},
            {"do","Do"},
            {"double","Double"},
            {"dynamic","Dynamic"},
            {"else","Else"},
            {"enum","Enum"},
            {"equals","Equals"},
            {"explicit","Explicit"},
            {"extern","Extern"},
            {"false","False"},
            {"finally","Finally"},
            {"fixed","Fixed"},
            {"float","Float"},
            {"for","For"},
            {"foreach","Foreach"},
            {"from","From"},
            {"get","Get"},
            {"global","Global"},
            {"goto","Goto"},
            {"group","Group"},
            {"if","If"},
            {"implicit","Implicit"},
            {"in","In"},
            {"int","Int"},
            {"into","Into"},
            {"interface","Interface"},
            {"internal","Internal"},
            {"is","Is"},
            {"join","Join"},
            {"let","Let"},
            {"lock","Lock"},
            {"long","Long"},
            {"namespace","Namespace"},
            {"new","New"},
            {"null","Null"},
            {"object","Object"},
            {"on","On"},
            {"operator","Operator"},
            {"orderby","Orderby"},
            {"out","Out"},
            {"override","Override"},
            {"params","Params"},
            {"partial","Partial"},
            {"private","Private"},
            {"protected","Protected"},
            {"public","Public"},
            {"readonly","Readonly"},
            {"ref","Ref"},
            {"remove","Remove"},
            {"return","Return"},
            {"sbyte","Sbyte"},
            {"sealed","Sealed"},
            {"select","Select"},
            {"set","Set"},
            {"short","Short"},
            {"sizeof","Sizeof"},
            {"stackalloc","Stackalloc"},
            {"static","Static"},
            {"string","String"},
            {"struct","Struct"},
            {"switch","Switch"},
            {"this","This"},
            {"throw","Throw"},
            {"true","True"},
            {"try","Try"},
            {"typeof","Typeof"},
            {"uint","Uint"},
            {"ulong","Ulong"},
            {"unchecked","Unchecked"},
            {"unsafe","Unsafe"},
            {"ushort","Ushort"},
            {"using","Using"},
            {"value","Value"},
            {"var","Var"},
            {"virtual","Virtual"},
            {"void","Void"},
            {"volatile","Volatile"},
            {"where","Where"},
            {"while","While"},
            {"yield","Yield" }
         };

        public static string SafeName(string name)
        {
            if(reservedWords.ContainsKey(name))
            {
                return reservedWords[name];
            }
            return name;
        }
    }
}
