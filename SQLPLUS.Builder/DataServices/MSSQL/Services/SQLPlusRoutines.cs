// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SqlPlus.net
//     For more information on SqlPlus.net visit http://www.SqlPlus.net
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SQLPLUS.Builder.DataServices.MSSQL.Models;

namespace SQLPLUS.Builder.DataServices.MSSQL
{
    public partial class Service
    {

        /// <summary>
        /// Builds the command object for SQLPlusRoutines method
        /// </summary>
        /// <param name="cnn">The connection that will execute the procedure</param>
        /// <returns>SqlCommand ready for execution</returns>
        private SqlCommand GetSQLPlusRoutinesCommand(SqlConnection cnn)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.Text,
                CommandText = @"
SELECT
[SPECIFIC_SCHEMA] [Schema],
[SPECIFIC_NAME] [Name],
[LAST_ALTERED] [LastModified],
[ROUTINE_TYPE] [RoutineType],
[DATA_TYPE] [DataType]
FROM INFORMATION_SCHEMA.ROUTINES
WHERE
CHARINDEX ( '--+sqlplusroutine', LOWER(ROUTINE_DEFINITION)) > 0
ORDER BY [Schema], [Name];
IF @@ROWCOUNT = 0
BEGIN
SET @ReturnValue=0;
END;
ELSE
BEGIN
SET @ReturnValue = 1;
END;",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ReturnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            return result;
        }
        private void SetSQLPlusRoutinesCommandOutputs(SqlCommand cmd, SQLPlusRoutinesOutput output)
        {
            if(cmd.Parameters[0].Value != DBNull.Value)
            {
                output.ReturnValue = (SQLPlusRoutinesOutput.Returns)cmd.Parameters[0].Value;
            }
        }

        private SQLPlusRoutinesResult GetSQLPlusRoutinesResultFromReader(SqlDataReader rdr)
        {
            SQLPlusRoutinesResult result = new SQLPlusRoutinesResult();

            if(!rdr.IsDBNull(0))
            {
                result.Schema = rdr.GetString(0);
            }

            result.Name = rdr.GetString(1);

            result.LastModified = rdr.GetDateTime(2);

            if(!rdr.IsDBNull(3))
            {
                result.RoutineType = rdr.GetString(3);
            }

            if(!rdr.IsDBNull(4))
            {
                result.DataType = rdr.GetString(4);
            }

            return result;
        }


        private void SQLPlusRoutinesCommand(SqlCommand cmd, SQLPlusRoutinesOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                output.ResultData = new List<SQLPlusRoutinesResult>();
                while(rdr.Read())
                {
                    output.ResultData.Add(GetSQLPlusRoutinesResultFromReader(rdr));
                }
                rdr.Close();
            }
            SetSQLPlusRoutinesCommandOutputs(cmd, output);
        }

        /// <summary>
        /// Selects all routines where the routine body includes the SQL Plus ROutine Tag (--+SQLPlusRoutine)
        /// SQL+ Routine: .SQLPlusRoutines - Authored by Alan Hyneman
        /// </summary>
        public SQLPlusRoutinesOutput SQLPlusRoutines()
        {
            SQLPlusRoutinesOutput output = new SQLPlusRoutinesOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = GetSQLPlusRoutinesCommand(sqlConnection))
                {
                    cmd.Transaction = sqlTransaction;
                    SQLPlusRoutinesCommand(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if(idx > 0)
                {
                    System.Threading.Thread.Sleep(retryOptions.RetryIntervals[idx-1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = GetSQLPlusRoutinesCommand(cnn))
                    {
                        cnn.Open();
						SQLPlusRoutinesCommand(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    bool throwException = true;

                    if(retryOptions.TransientErrorNumbers.Contains(sqlException.Number))
                    {
                        throwException = (idx == retryOptions.RetryIntervals.Count);

                        if (retryOptions.Logger != null)
                        {
                            retryOptions.Logger.Log(sqlException);
                        }
                    }
                    if(throwException)
                    {
                        throw;
                    }
                }
            }
            return output;
        }
    }
}