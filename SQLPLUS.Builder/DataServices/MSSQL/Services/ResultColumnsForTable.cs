// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SqlPlus.net
//     For more information on SqlPlus.net visit http://www.SqlPlus.net
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using SQLPLUS.Builder.DataServices.MSSQL.Models;

namespace SQLPLUS.Builder.DataServices.MSSQL
{
    public partial class Service
    {

        /// <summary>
        /// Builds the command object for ResultColumnsForTable method.
        /// </summary>
        /// <param name="cnn">The connection that will execute the procedure.</param>
        /// <param name="input">ResultColumnsForTableInput instance for loading parameter values.</param>
        /// <returns>SqlCommand ready for execution.</returns>
        private SqlCommand GetResultColumnsForTableCommand(SqlConnection cnn, IResultColumnsForTableInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.Text,
                CommandText = @"
SELECT
[ORDINAL_POSITION] - 1 AS [Index],
CAST([COLUMN_NAME] AS VARCHAR(128)) AS [Name],
CASE
WHEN LOWER(IS_NULLABLE) = 'no' THEN CAST(0 AS bit)
ELSE CAST(1 AS bit)
END [IsNullable],
[DATA_TYPE] [SQLType],
CAST([CHARACTER_MAXIMUM_LENGTH] AS int) [CharacterMaxLength],
CAST(NUMERIC_PRECISION AS int) [NumericPrecision],
CAST(DATETIME_PRECISION AS int) [DateTimePrecision],
CAST(NUMERIC_SCALE AS int) [NumericScale]
FROM
[INFORMATION_SCHEMA].[ROUTINE_COLUMNS]
WHERE
TABLE_SCHEMA = @Schema AND
TABLE_NAME = @Function;
IF @@ROWCOUNT = 0
BEGIN
SET @ReturnValue=0;
END;
ELSE
BEGIN
SET @ReturnValue = 1;
END;",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Schema",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.NVarChar,
                Size = 128,
				Value = input.Schema
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@Function",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.NVarChar,
                Size = 128,
				Value = input.Function
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ReturnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
                Value = DBNull.Value
            });

            return result;
        }
        private void SetResultColumnsForTableCommandOutputs(SqlCommand cmd, ResultColumnsForTableOutput output)
        {
            if(cmd.Parameters[2].Value != DBNull.Value)
            {
                output.ReturnValue = (ResultColumnsForTableOutput.Returns)cmd.Parameters[2].Value;
            }
        }

        private ResultColumnsForTableResult GetResultColumnsForTableResultFromReader(SqlDataReader rdr)
        {
            ResultColumnsForTableResult result = new ResultColumnsForTableResult();

            if(!rdr.IsDBNull(0))
            {
                result.Index = rdr.GetInt32(0);
            }

            if(!rdr.IsDBNull(1))
            {
                result.Name = rdr.GetString(1);
            }

            if(!rdr.IsDBNull(2))
            {
                result.IsNullable = rdr.GetBoolean(2);
            }

            if(!rdr.IsDBNull(3))
            {
                result.SQLType = rdr.GetString(3);
            }

            if(!rdr.IsDBNull(4))
            {
                result.CharacterMaxLength = rdr.GetInt32(4);
            }

            if(!rdr.IsDBNull(5))
            {
                result.NumericPrecision = rdr.GetInt32(5);
            }

            if(!rdr.IsDBNull(6))
            {
                result.DateTimePrecision = rdr.GetInt32(6);
            }

            if(!rdr.IsDBNull(7))
            {
                result.NumericScale = rdr.GetInt32(7);
            }

            return result;
        }


        private void ResultColumnsForTableCommand(SqlCommand cmd, ResultColumnsForTableOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                output.ResultData = new List<ResultColumnsForTableResult>();
                while(rdr.Read())
                {
                    output.ResultData.Add(GetResultColumnsForTableResultFromReader(rdr));
                }
                rdr.Close();
            }
            SetResultColumnsForTableCommandOutputs(cmd, output);
        }

        /// <summary>
        /// Gets the result column meta data for a table value function.
        /// SQL+ Routine: .ResultColumnsForTable - Authored by Alan Hyneman
        /// </summary>
        public ResultColumnsForTableOutput ResultColumnsForTable(IResultColumnsForTableInput input, bool bypassValidation = false)
        {
            if(!bypassValidation)
            {
                if (!input.IsValid())
                {
		            throw new ArgumentException("ResultColumnsForTableInput fails validation - use the ResultColumnsForTableInput.IsValid() method prior to passing the input argument to the ResultColumnsForTable method.", "input");
                }
            }
            ResultColumnsForTableOutput output = new ResultColumnsForTableOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = GetResultColumnsForTableCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    ResultColumnsForTableCommand(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if(idx > 0)
                {
                    System.Threading.Thread.Sleep(retryOptions.RetryIntervals[idx-1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = GetResultColumnsForTableCommand(cnn, input))
                    {
                        cnn.Open();
						ResultColumnsForTableCommand(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    bool throwException = true;

                    if(retryOptions.TransientErrorNumbers.Contains(sqlException.Number))
                    {
                        throwException = (idx == retryOptions.RetryIntervals.Count);

                        if (retryOptions.Logger != null)
                        {
                            retryOptions.Logger.Log(sqlException);
                        }
                    }
                    if(throwException)
                    {
                        throw;
                    }
                }
            }
            return output;
        }
    }
}