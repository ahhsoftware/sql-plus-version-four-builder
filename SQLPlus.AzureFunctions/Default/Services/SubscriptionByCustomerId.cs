// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Underlying Routine: SubscriptionByCustomerId
//     Last Modified On: 2/19/2023 11:15:22 PM
//     Written By: Alan Hyneman
//     Visit https://www.SQLPLUS.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace SQLPlus.AzureFunctions.Default
{
    #region Using Statments

    using SQLPlus.AzureFunctions.Default.Models;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Threading;

    #endregion Using Statements

    /// <summary>
    /// This file contains the source code for the SubscriptionByCustomerId routine.
    /// </summary>
    public partial class Service
    {
        #region Build SqlCommand

        private SqlCommand SubscriptionByCustomerId_BuildCommand(SqlConnection cnn, SubscriptionByCustomerIdInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.StoredProcedure,
                CommandText = "[dbo].[SubscriptionByCustomerId]",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ReturnValue",
                Direction = ParameterDirection.ReturnValue,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@CustomerId",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
                Value = input.CustomerId
            });

            return result;
        }

        #endregion Build SqlCommand

        #region Read Output Parameters And Return Value

        private void SubscriptionByCustomerId_SetParameters(SqlCommand cmd, SubscriptionByCustomerIdOutput output)
        {
            if(cmd.Parameters[0].Value != DBNull.Value)
            {
                output.ReturnValue = (SubscriptionByCustomerIdOutput.Returns)cmd.Parameters[0].Value;
            }
        }

        #endregion Read Output Parameters And Return Value

        #region Reader To Result Objects
      
        private SubscriptionByCustomerIdResult.Subscription SubscriptionByCustomerId_Subscription(SqlDataReader rdr)
        {
            return new SubscriptionByCustomerIdResult.Subscription(
                rdr.GetInt32(0),
                rdr.GetInt32(1),
                rdr.GetInt32(2),
                rdr.GetByte(3),
                rdr.GetDateTime(4),
                rdr.GetDateTime(5),
                rdr.GetString(6),
                rdr.GetString(7),
                rdr.IsDBNull(8) ? default : rdr.GetBoolean(8),
                rdr.IsDBNull(9) ? default : rdr.GetInt32(9)
            );
        }
      
        private SubscriptionByCustomerIdResult.Team SubscriptionByCustomerId_Team(SqlDataReader rdr)
        {
            return new SubscriptionByCustomerIdResult.Team(
                rdr.GetInt32(0),
                rdr.GetInt32(1),
                rdr.IsDBNull(2) ? default : rdr.GetInt32(2),
                rdr.IsDBNull(3) ? default : rdr.GetString(3),
                rdr.GetString(4)
            );
        }
    
        #endregion Reader To Result Objects

        #region MultiSetResolve

        private string SubscriptionByCustomerId_Resolve(SqlDataReader rdr)
        {
            string[] array = new string[rdr.FieldCount];
            for (int idx = 0; idx != array.Length; idx++)
            {
                array[idx] = rdr.GetName(idx);
            }
            string concatColumns = string.Join("_", array);

            switch(concatColumns)
            {
                case ("SubscriptionId_CustomerId_SeatCount_SubscriptionTypeId_OriginalStartDate_LastPaymentDate_SubscriptionKey_UserName_IsTeamMember_SubscriptionTeamId"):
                    return "Subscription";
                case ("SubscriptionTeamId_SubscriptionId_CustomerId_Email_Status"):
                    return "Team";
            }

            throw new Exception("The multi result query could not resolve. Each query must contain at least one unique value. Edit the routine and rebuild the project needs a fresh SQL PLUS build.");
        }

        #endregion MultSet Resolver

        #region Execute Command

        private void SubscriptionByCustomerId_Execute(SqlCommand cmd, SubscriptionByCustomerIdOutput output)
        {
            using (SqlDataReader rdr = cmd.ExecuteReader())
            {
                do
                {
                    if (rdr.HasRows)
                    {
                        switch (SubscriptionByCustomerId_Resolve(rdr))
                        {
                            case "Subscription":

                                if(rdr.Read())
                                {
                                    output.ResultData.SubscriptionResult = SubscriptionByCustomerId_Subscription(rdr);
                                }
                                break;
                            case "Team":

                                output.ResultData.TeamResult = new List<SubscriptionByCustomerIdResult.Team>();
                                while(rdr.Read())
                                {
                                    output.ResultData.TeamResult.Add(SubscriptionByCustomerId_Team(rdr));
                                }
                                break;
                        }
                    }
                } while (rdr.NextResult());

                rdr.Close();
            }

            SubscriptionByCustomerId_SetParameters(cmd, output);
        }

        #endregion Execute Command

        #region Public Service

        /// <summary>
        /// Queries subscriptions for the given criteria.<br/>
        /// DB Routine: dbo.SubscriptionByCustomerId<br/>
        /// Author: Alan Hyneman<br/>
        /// </summary>
        /// <param name="input">SubscriptionByCustomerIdInput instance.</param>
        /// <returns>Instance of SubscriptionByCustomerIdOutput</returns>
        public SubscriptionByCustomerIdOutput SubscriptionByCustomerId(SubscriptionByCustomerIdInput input)
        {
            ValidateInput(input, nameof(SubscriptionByCustomerId));
            SubscriptionByCustomerIdOutput output = new SubscriptionByCustomerIdOutput { ResultData = new SubscriptionByCustomerIdResult() };
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = SubscriptionByCustomerId_BuildCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    SubscriptionByCustomerId_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = SubscriptionByCustomerId_BuildCommand(cnn, input))
                    {
                        cnn.Open();
						SubscriptionByCustomerId_Execute(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion

    }
}

