// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Underlying Routine: ErrorLogInsert
//     Last Modified On: 2/12/2023 11:50:43 AM
//     Written By: alan
//     Visit https://www.SQLPLUS.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace SQLPlus.AzureFunctions.Default
{
    #region Using Statments

    using SQLPlus.AzureFunctions.Default.Models;
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Threading;

    #endregion Using Statements

    /// <summary>
    /// This file contains the source code for the ErrorLogInsert routine.
    /// </summary>
    public partial class Service
    {
        #region Build SqlCommand

        private SqlCommand ErrorLogInsert_BuildCommand(SqlConnection cnn, ErrorLogInsertInput input)
        {
            SqlCommand result = new SqlCommand()
            {
                CommandType = CommandType.StoredProcedure,
                CommandText = "[dbo].[ErrorLogInsert]",
                Connection = cnn
            };

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ReturnValue",
                Direction = ParameterDirection.ReturnValue,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ErrorLogId",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@CustomerId",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.Int,
                Scale = 0,
                Precision = 10,
                Value = DBNull.Value
            });

            result.Parameters.Add(new SqlParameter()
            {
                ParameterName = "@ErrorMessage",
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.NVarChar,
                Size = -1,
                Value = DBNull.Value
            });

            if (input.CustomerId != null)
            {
                result.Parameters["@CustomerId"].Value = input.CustomerId;
            }
            if (input.ErrorMessage != null)
            {
                result.Parameters["@ErrorMessage"].Value = input.ErrorMessage;
            }
            return result;
        }

        #endregion Build SqlCommand

        #region Read Output Parameters And Return Value

        private void ErrorLogInsert_SetParameters(SqlCommand cmd, ErrorLogInsertOutput output)
        {
            if(cmd.Parameters[0].Value != DBNull.Value)
            {
                output.ReturnValue = (ErrorLogInsertOutput.Returns)cmd.Parameters[0].Value;
            }
            if(cmd.Parameters[1].Value != DBNull.Value)
            {
                output.ErrorLogId = (int?)cmd.Parameters[1].Value;
            }
        }

        #endregion Read Output Parameters And Return Value

        #region Execute Command

        private void ErrorLogInsert_Execute(SqlCommand cmd, ErrorLogInsertOutput output)
        {
            cmd.ExecuteNonQuery();

            ErrorLogInsert_SetParameters(cmd, output);
        }

        #endregion Execute Command

        #region Public Service

        /// <summary>
        /// Inserts a new record into the dbo.ErrorLog table.<br/>
        /// DB Routine: dbo.ErrorLogInsert<br/>
        /// Author: alan<br/>
        /// </summary>
        /// <param name="input">ErrorLogInsertInput instance.</param>
        /// <returns>Instance of ErrorLogInsertOutput</returns>
        public ErrorLogInsertOutput ErrorLogInsert(ErrorLogInsertInput input)
        {
            ValidateInput(input, nameof(ErrorLogInsert));
            ErrorLogInsertOutput output = new ErrorLogInsertOutput();
			if(sqlConnection != null)
            {
                using (SqlCommand cmd = ErrorLogInsert_BuildCommand(sqlConnection, input))
                {
                    cmd.Transaction = sqlTransaction;
                    ErrorLogInsert_Execute(cmd, output);
                }
                return output;
            }
            for(int idx=0; idx <= retryOptions.RetryIntervals.Count; idx++)
            {
                if (idx > 0)
                {
                    Thread.Sleep(retryOptions.RetryIntervals[idx - 1]);
                }
                try
                {
                    using (SqlConnection cnn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = ErrorLogInsert_BuildCommand(cnn, input))
                    {
                        cnn.Open();
						ErrorLogInsert_Execute(cmd, output);
                        cnn.Close();
                    }
					break;
                }
                catch(SqlException sqlException)
                {
                    AllowRetryOrThrowError(idx, sqlException);
                }
            }
            return output;
        }

        #endregion

    }
}

