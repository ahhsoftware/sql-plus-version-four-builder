// --------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the SQL PLUS Code Generation Utility.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//     Visit https://www.SQLplus.net for more information about the SQL PLUS build time ORM.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------
namespace SqlPlusBase
{
    #region usings

    using System.Collections.Generic;
    using System.Data;
    using SQLPLUS.Build.Test.Basic.UserDefinedTypes;
    using SqlPlusBase;
    using System;

    #endregion usings


    /// <summary>
    /// SQL Plus helpers methods.
    /// Note this file includes only helper methods that are required by this particular build.
    /// </summary>
    public partial class Helpers
    {



        /// <summary>
        /// Builds a datatable for that is applied to the parameter value.
        /// </summary>
        /// <param name="input">List of Data</param>
        /// <returns>DataTable populated with values from input</returns>
        public static DataTable BuildDataTable(List<ETask> input)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Task", typeof(string));
            dt.Columns.Add("Desc", typeof(string));
            dt.Columns.Add("Time", typeof(string));
            dt.Columns.Add("LongDesc", typeof(string));
            dt.Columns.Add("Skill", typeof(string));
            dt.Columns.Add("TaskEnter", typeof(int));
            dt.Columns.Add("TaskInactive", typeof(short));
            dt.Columns.Add("Hash", typeof(int));
            if(input != null)
			{
                foreach(ETask item in input)
                {
                    DataRow rw = dt.NewRow();
                    rw[0] = item.Task;
                    rw[1] = item.Desc;
                    rw[2] = item.Time;
                    if(item.LongDesc != null)
                    {
                        rw[3] = item.LongDesc;
                    }
                    rw[4] = item.Skill;
                    rw[5] = item.TaskEnter;
                    rw[6] = item.TaskInactive;
                    rw[7] = item.Hash;
                    dt.Rows.Add(rw);
                }
			}
            return dt;
        }
        /// <summary>
        /// Builds a datatable for that is applied to the parameter value.
        /// </summary>
        /// <param name="input">List of Data</param>
        /// <returns>DataTable populated with values from input</returns>
        public static DataTable BuildDataTable(List<EDispatchTech> input)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Dispatch", typeof(string));
            dt.Columns.Add("ServiceMan", typeof(string));
            dt.Columns.Add("Counter", typeof(string));
            dt.Columns.Add("Status", typeof(string));
            dt.Columns.Add("DispDate", typeof(DateTime));
            dt.Columns.Add("DispTime", typeof(string));
            dt.Columns.Add("TimeOn", typeof(string));
            dt.Columns.Add("TimeOff", typeof(string));
            dt.Columns.Add("DateOff", typeof(DateTime));
            dt.Columns.Add("Dispatcher", typeof(string));
            dt.Columns.Add("Complete", typeof(string));
            dt.Columns.Add("PromDate", typeof(string));
            dt.Columns.Add("TPromDate", typeof(DateTime));
            dt.Columns.Add("TPromTime", typeof(string));
            dt.Columns.Add("Zone", typeof(string));
            dt.Columns.Add("Priority", typeof(string));
            dt.Columns.Add("Terms", typeof(string));
            dt.Columns.Add("TechTime", typeof(double));
            dt.Columns.Add("Mobile", typeof(int));
            dt.Columns.Add("POReceived", typeof(short));
            dt.Columns.Add("TimeEntryCreated", typeof(short));
            dt.Columns.Add("HoursPayed", typeof(double));
            dt.Columns.Add("Hash", typeof(int));
            if(input != null)
			{
                foreach(EDispatchTech item in input)
                {
                    DataRow rw = dt.NewRow();
                    rw[0] = item.Dispatch;
                    rw[1] = item.ServiceMan;
                    rw[2] = item.Counter;
                    rw[3] = item.Status;
                    if(item.DispDate != null)
                    {
                        rw[4] = item.DispDate;
                    }
                    rw[5] = item.DispTime;
                    rw[6] = item.TimeOn;
                    rw[7] = item.TimeOff;
                    if(item.DateOff != null)
                    {
                        rw[8] = item.DateOff;
                    }
                    rw[9] = item.Dispatcher;
                    rw[10] = item.Complete;
                    rw[11] = item.PromDate;
                    if(item.TPromDate != null)
                    {
                        rw[12] = item.TPromDate;
                    }
                    rw[13] = item.TPromTime;
                    rw[14] = item.Zone;
                    rw[15] = item.Priority;
                    rw[16] = item.Terms;
                    rw[17] = item.TechTime;
                    rw[18] = item.Mobile;
                    rw[19] = item.POReceived;
                    rw[20] = item.TimeEntryCreated;
                    rw[21] = item.HoursPayed;
                    rw[22] = item.Hash;
                    dt.Rows.Add(rw);
                }
			}
            return dt;
        }
        /// <summary>
        /// Builds a datatable for that is applied to the parameter value.
        /// </summary>
        /// <param name="input">List of Data</param>
        /// <returns>DataTable populated with values from input</returns>
        public static DataTable BuildDataTable(List<EDispatch> input)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Dispatch", typeof(string));
            dt.Columns.Add("CustNo", typeof(string));
            dt.Columns.Add("LocNo", typeof(string));
            dt.Columns.Add("Tasks", typeof(string));
            dt.Columns.Add("Zone", typeof(string));
            dt.Columns.Add("CalledInBy", typeof(string));
            dt.Columns.Add("Terms", typeof(string));
            dt.Columns.Add("PONum", typeof(string));
            dt.Columns.Add("RecDate", typeof(DateTime));
            dt.Columns.Add("RecTime", typeof(string));
            dt.Columns.Add("RecBy", typeof(string));
            dt.Columns.Add("Priority", typeof(string));
            dt.Columns.Add("Invoice", typeof(string));
            dt.Columns.Add("Complete", typeof(DateTime));
            dt.Columns.Add("TechTime", typeof(double));
            dt.Columns.Add("MultiTech", typeof(string));
            dt.Columns.Add("Notes", typeof(string));
            dt.Columns.Add("Invoiced", typeof(int));
            dt.Columns.Add("JobNumber", typeof(string));
            dt.Columns.Add("QuoteSource", typeof(string));
            dt.Columns.Add("Sort", typeof(string));
            dt.Columns.Add("Hash", typeof(int));
            if(input != null)
			{
                foreach(EDispatch item in input)
                {
                    DataRow rw = dt.NewRow();
                    rw[0] = item.Dispatch;
                    rw[1] = item.CustNo;
                    rw[2] = item.LocNo;
                    if(item.Tasks != null)
                    {
                        rw[3] = item.Tasks;
                    }
                    rw[4] = item.Zone;
                    rw[5] = item.CalledInBy;
                    rw[6] = item.Terms;
                    rw[7] = item.PONum;
                    if(item.RecDate != null)
                    {
                        rw[8] = item.RecDate;
                    }
                    rw[9] = item.RecTime;
                    rw[10] = item.RecBy;
                    rw[11] = item.Priority;
                    rw[12] = item.Invoice;
                    if(item.Complete != null)
                    {
                        rw[13] = item.Complete;
                    }
                    rw[14] = item.TechTime;
                    rw[15] = item.MultiTech;
                    if(item.Notes != null)
                    {
                        rw[16] = item.Notes;
                    }
                    rw[17] = item.Invoiced;
                    rw[18] = item.JobNumber;
                    if(item.QuoteSource != null)
                    {
                        rw[19] = item.QuoteSource;
                    }
                    rw[20] = item.Sort;
                    rw[21] = item.Hash;
                    dt.Rows.Add(rw);
                }
			}
            return dt;
        }
    }
}
